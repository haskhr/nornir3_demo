<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Homes on Nornir 3 demo</title>
    <link>http://localhost:1313/nornir3_demo/home/</link>
    <description>Recent content in Homes on Nornir 3 demo</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://localhost:1313/nornir3_demo/home/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/00_intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/00_intro/</guid>
      <description> Introduction In this presentation we are going to do a nornir 3 deep dive.
To do so we are going to pretend we have been hired by Acme Corp. and tasked to build the necessary tooling so the network engineering team can easily build their own tooling
 Goals  Write an inventory plugin to interact with Acme Inventory System Write a connection plugin and a few taks to interact with AcmeOS Write a few processors to show meaningful information to users and to log custom events to syslog Write a runner that understands Acme&amp;rsquo;s network topology in order to safely deploy changes at scale Write a few functions to show more meaningful information to users Build a POC for a network orchestrator   </description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/10_inventory_plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/10_inventory_plugin/</guid>
      <description>Inventory plugins An inventory plugin is a nornir plugin that allows nornir to create an Inventory object from an external source
 It is implemented by writing a class with the following structure:
from typing import Dict, Optional, List from nornir.core.inventory import Inventory class MyPlugin: def __init__(self, *args: Any, **kwargs: Any) -&amp;gt; None: # This method will allow you to configure the plugin # For instance, when creating the object inventory.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/20_connection_plugin/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/20_connection_plugin/</guid>
      <description>Connection plugins A connection plugin is a nornir plugin that allows nornir to manage connections with devices
 It is implemented by writing a class with the following structure:
from typing import Any, Dict, Optional from nornir.core.configuration import Config CONNECTION_NAME = &amp;#34;my-connection-name&amp;#34; class MyPlugin: def open( self, hostname: Optional[str], username: Optional[str], password: Optional[str], port: Optional[int], platform: Optional[str], extras: Optional[Dict[str, Any]] = None, configuration: Optional[Config] = None, ) -&amp;gt; None: # we open the connection and save it under self.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/30_processors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/30_processors/</guid>
      <description>Processors A processor is a plugin that taps into certain events and allows the user to execute arbitrary code on those events.
Those events are:
 When a task starts or finishes When a host starts executing the task or completes it When a host starts executing a subtasks or completes it   The benefit of using a Processor is that the code for each event is called as they occur so you can execute arbitrary code without having to wait until the entire task is completed</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/40_runners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/40_runners/</guid>
      <description>Runners A runner is a plugin that dictates how to execute the tasks over the hosts
 Nornir comes with two runners:
 SerialRunner executes the task over all the hosts one after the other ThreadedRunner executes the task over all the hosts in parallel using threads (default)   You can implement a runner by writing a class with the following structure:
class DCAwareRunner: def __init__(self, *args: Any, **kwargs: Any) -&amp;gt; None: # This method will allow you to configure the plugin # For instance, when creating the object runner.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/50_functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/50_functions/</guid>
      <description>Functions A nornir function is a standard python function you invoke on your own
There are no rules to write them :)
print_result is the most well known example of a nornir function
 Example: rich_table We are going to write an alternative to print_result that leverages rich
 # nornir3_demo/plugins/functions/rich.py def rich_table(results: AggregatedResult) -&amp;gt; None: console = Console() for hostname, host_result in results.items(): table = Table(box=MINIMAL_DOUBLE_HEAD) table.add_column(hostname, justify=&amp;#34;right&amp;#34;, style=&amp;#34;cyan&amp;#34;, no_wrap=True) table.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/60_orchestrator/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/60_orchestrator/</guid>
      <description>Orchestrator Finally we are going to wrap everything up by writing a POC for an orchestraor
It won&amp;rsquo;t be feature complete but it will highlight its capabilities
 Objective and Steps  Write a HTTP API that allows us to execute tasks over our network To showcase the orchestrator we will have an endpoint that will upgrade the OS in our entire network leveraging everything we built so far We will use flask to write the service We will write an OpenAPI specification Finally we will add some instrumentation   OpenAPI Specification The specification can be found under orchestrator.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/nornir3_demo/home/90_outro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/nornir3_demo/home/90_outro/</guid>
      <description> FIN David Barroso - linkedin - github - twitter
Part of ipSpace&amp;rsquo;s Network Automation Roadmap
Slides Github
 </description>
    </item>
    
  </channel>
</rss>